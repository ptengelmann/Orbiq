datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* ========= Auth ========= */
model User {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?     @unique
  image                String?
  role                 Role        @default(CREATOR)
  onboardingCompleted  Boolean     @default(false)
  passwordHash         String?     // <-- added

  accounts    Account[]
  sessions    Session[]
  memberships Membership[]
  brandKits   BrandKit[]  @relation("UserBrandKits")
  mediaKits   MediaKit[]  @relation("UserMediaKits")

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier])
}

/* ========= Multi-tenant ========= */
model Organization {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        OrgType       @default(CREATOR_TEAM)
  slug        String        @unique
  members     Membership[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Membership {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String        @db.ObjectId
  organizationId String        @db.ObjectId
  role           OrgRole       @default(MEMBER)
  createdAt      DateTime      @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

/* ========= Brand Kit ========= */
model BrandKit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(name: "UserBrandKits", fields: [userId], references: [id], onDelete: Cascade)

  brandName   String?
  vibe        String?
  audience    String?
  tagline     String?
  palette     String[]
  voice       Json?
  logoPrompts String[]

  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

/* ========= Media Kit (public page) ========= */
model MediaKit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(name: "UserMediaKits", fields: [userId], references: [id], onDelete: Cascade)

  handle      String   @unique
  title       String?
  bio         String?
  links       Json?
  brandKitId  String?    @db.ObjectId

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

/* ========= Enums ========= */
enum Role {
  CREATOR
  AGENCY
  ADMIN
}

enum OrgRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum OrgType {
  AGENCY
  CREATOR_TEAM
}
