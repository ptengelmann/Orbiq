// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* --- Auth models (NextAuth) --- */
model User {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  email       String?     @unique
  image       String?
  role        Role        @default(CREATOR)
  accounts    Account[]
  sessions    Session[]
  memberships Membership[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier])
}

/* --- Orbiq multi-tenant --- */
model Organization {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        OrgType       @default(CREATOR_TEAM)
  slug        String        @unique
  members     Membership[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Membership {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String        @db.ObjectId
  organizationId String        @db.ObjectId
  role           OrgRole       @default(MEMBER)
  createdAt      DateTime      @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

enum Role {
  CREATOR
  AGENCY
  ADMIN
}

enum OrgRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum OrgType {
  AGENCY
  CREATOR_TEAM
}
